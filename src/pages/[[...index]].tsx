import { type NextPage } from "next";
import Head from "next/head";
import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";
import { Categories, CategoriesEnum } from "../components/SelectCategory";
import { SelectCategory } from "../components/SelectCategory";
import { DialogNewPost } from "../components/DialogNewPost";
import { useRouter } from "next/router";
import { Voter } from "../components/Voter";
import { Loader } from "../components/Loader";
import { SignInButton } from "../components/SignInButton";
import { LogOutButton } from "../components/LogOutButton";
import { Post } from "@prisma/client";
import { useEffect, useState } from "react";

function truncateIfBig(str: string, number = 24) {
  if (str.length > number) {
    return `${str.slice(0, number)}..`;
  }
  return str;
}

const Home: NextPage = () => {
  const router = useRouter();
  const session = useSession();
  const query = router.query.index
    ? router.query.index[0]?.toUpperCase()
    : null;
  const list = trpc.posts.list.useQuery(query ?? null);
  function handleSelectChange(v: CategoriesEnum) {
    if (v === "ALL") {
      router.push(`/`);
    } else {
      router.push(`/${v.toLowerCase()}`);
    }
  }

  return (
    <>
      <Head>
        <title>How to web-dev</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex  min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex max-w-3xl flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-2xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            How to{" "}
            <span className="bg-gradient-to-r from-purple-700 to-pink-400 bg-clip-text  font-extrabold text-transparent">
              web-dev
            </span>
          </h1>
          <h2 className="text-sm font-extrabold leading-10 tracking-tight text-white sm:text-[1.7rem]">
            Share with other the knowledge you come across
          </h2>
          <div className="flex w-1/2  justify-between sm:w-full">
            <SelectCategory onValueChange={handleSelectChange} />
            {session.data?.user ? (
              <div>
                <DialogNewPost /> <LogOutButton />
              </div>
            ) : (
              <SignInButton />
            )}
          </div>
          <div className="flex w-full flex-col items-center gap-2 ">
            {list.data ? (
              list.data.length > 0 ? (
                list.data.map((i) => <Post key={i.id} post={i} />)
              ) : (
                <EmptyState />
              )
            ) : (
              <Loader />
            )}
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;

function EmptyState() {
  return (
    <div className="item-center flex w-full justify-between rounded-lg border border-gray-800 bg-slate-900 p-4 text-white">
      <div className="w-full text-center">
        <span>There are still no entries for this filter!</span>
      </div>
    </div>
  );
}

function Post({ post }: { post: Post }) {
  const [title, setTitle] = useState<string | null>(null);
  const [description, setDescription] = useState<string | null>(null);

  useEffect(() => {
    if (post.og) {
      const ogParsed = JSON.parse(post.og as string);
      const ogTitle = ogParsed.ogTitle ?? "";
      const ogSiteName = ogParsed.ogSiteName ?? "";
      const ogDescription = ogParsed.ogDescription ?? "";
      const result =
        ogTitle && ogSiteName
          ? `${ogTitle} - ${ogSiteName}`
          : ogTitle ?? ogSiteName;

      setDescription(truncateIfBig(ogDescription, 128));
      setTitle(truncateIfBig(result));
    } else {
      setTitle(truncateIfBig(post.link));
    }
  }, [post]);

  return (
    <div className="item-center flex w-full justify-between rounded-lg border border-gray-800 bg-slate-900 p-4 text-white">
      <div className="flex flex-col items-start">
        <h2 className="my-auto mb-2 font-bold">{title}</h2>
        {description && (
          <h3 className="my-auto mb-4 pr-2 text-sm">{description}</h3>
        )}
        <p className="w-full text-sm">
          {/* eslint-disable-next-line @typescript-eslint/ban-ts-comment */}
          {/* @ts-ignore-next */}
          Sent by: {post.user.name} -{" "}
          <span
            className={`w-8 rounded p-[2px] px-1 text-xs font-bold ${
              false &&
              " bg-gray-400 bg-purple-400 bg-yellow-400 bg-blue-700 bg-blue-400"
            } ${
              Categories.find(({ value }) => value === post.category)?.color
            }`}
          >
            {Categories.find(({ value }) => value === post.category)?.label}
          </span>
        </p>
      </div>
      <div className="flex items-center gap-4">
        <a
          className="w-28 rounded border border-gray-800 bg-gray-800 p-1 text-center hover:bg-gray-900 "
          target={"_blank"}
          href={post.link}
          rel="noreferrer"
        >
          Visit website
        </a>
        {/* eslint-disable-next-line @typescript-eslint/ban-ts-comment */}
        {/* @ts-ignore-next */}
        <Voter id={post.id} votes={post.votes} />
      </div>
    </div>
  );
}
